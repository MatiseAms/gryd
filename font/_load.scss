@mixin font-include($name, $file, $weight: ('normal'), $type: ('normal'), $files: (), $path: $base-font-path, $font-display: 'auto', $variable: false) {
	$src: ();
	@if ($variable) {
		$format: 'woff2-variations';
		$files: ('woff2')
	}
	@each $file-type in $files {
		$format: $file-type !default;

		$value: "url('#{$path}/#{$file}.#{$file-type}') format('#{$format}')";
		$src: append($src, $value);
	}

	@if($name != 'serif' and $name != 'sans-serif') {
		@font-face {
			@if (str-index($name, ' ')) {
				$name: '#{$name}';
			}
			@if ($type == 'italic') {
				$name: '#{$name}#{$type}';
			}
			src: to-string($src, ',');
			font-weight: $weight;
			font-family: $name;
			font-style: $type;
			font-display: $font-display;
		};
	}
}

@mixin font-list( $title, $name, $weights, $variable: false, $types: ('normal'), $files: ('eot', 'woff', 'svg', 'ttf'), $path: $base-font-path, $font-display: 'auto') {
	@each $type in $types {
		$italic: '';
		@if $type == 'italic' {
			$italic: 'Italic';
		}
		@if $variable and $weights != null {
			@include font-include(font-quotes($title), unquote('#{$name}#{$italic}'), $weights, $type, $files, $path, $font-display, $variable);
		} @else if $weights != null {
			@for $i from 1 through length($weights) {
				$weight: nth($weights, $i);
				@include font-include(font-quotes($title), unquote('#{$name}-#{nth($weight, 1)}#{$italic}'), nth($weight, 2), $type, $files, $path, $font-display, $variable);
			}
		} @else {
			@include font-include(font-quotes($title), unquote('#{$name}#{$italic}'), 'normal', $type, $files, $path, $font-display, $variable);
		}
	}
}


//
// Check the font and load them.
@mixin font-load($font) {
	//
	// Define scoped variables
	$load: true;
	$font-name: '';
	$font-types: ('normal') !default;
	$font-path: $base-font-path !default;
	$font-files: ('woff2', 'woff', 'ttf');
	$font-display: 'auto';
	$font-variable: false;
	$family: '';
	//
	// Check if the variable is a map
	// if it's not a map, its not a font to include.

	@if $font and type-of($font) == 'map' {
		//
		// Check if the include has a files prop;
		@if map-has-key($font, 'files') {
			$font-files: map-get($font, 'files');
		}
		//
		// Check if the include has a font-family;
		@if map-has-key($font, 'font-family') == false {
			@warn "Your included font doesn't have a specified 'font-family'";
		} @else {
			//
			// Check if the font if it needs to load, has weights to include.
			@if map-has-key($font, 'load') {
				@if map-get($font, 'load') == true {
					$load: true;
				}
			}
			// Check if a font path has been set, if so, override the default;
			@if map-has-key($font, 'path') {
				$font-path: map-get($font, 'path');
			}
			// Check if a font path has been set, if so, override the default;
			@if map-has-key($font, 'types') {
				$font-types: map-get($font, 'types');
			}
			// Check if a font files have been set
			@if map-has-key($font, 'files') {
				$font-files: map-get($font, 'files');
			}
			// Check if a font display have been set
			@if map-has-key($font, 'display') {
				$font-display: map-get($font, 'display');
			}
			// Check if font is variable
			@if map-has-key($font, 'variable') {
				$font-variable: map-get($font, 'variable');
			}
			// Get the font name
			$font-name: convertToFontname($font, true);

			// Load the fonts if true
			@if $load {
				@include font-list(
					convertToFontname($font),
					convertToFontname($font, true),
					map-get($font, weights),
					$font-variable,
					$font-types,
					$font-files,
					$font-path,
					$font-display
				);
			}

			// Set use
			@if map-has-key($font, 'use') {
				@include font-use(map-get($font, 'use'), $font);
			}
			$weight-classes: false;
			@if map-has-key($font, 'weight-classes') {
				$weight-classes: map-get($font, 'weight-classes');
				@each $weight, $value in map-get($font, 'weights') {
					.font-#{to-lower-case($weight)} {
						font-weight: #{$value};
					}
				}
			}
			@if map-has-key($font, 'types') {
				@each $type in map-get($font, 'types') {
					.font-#{to-lower-case($type)} {
						font-style: #{$type};
					}
				}
			}
		}
	}
}
